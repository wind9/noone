login #登陆
    execute_login_task #执行登陆任务
    获取可登录用户信息，循环添加登陆任务,执行登陆前清除任务队列
        login_task
            get_session
                do_login
                    get_encode_username
                    get_server_data
                    判断是否需要验证码登陆:
                        是
                            login_by_pincode
                                yundama获取验证码,拼接参数
                                get_redirect
                        否
                            login_no_pincode
                                get_redirect
                     根据get_redirect结果判断是否验证码正确，是否需要retry
            判断获得的重定向url，请求后判断账号是否登陆正常
                正常
                    cookies及proxy信息写入redis hash表,该账号rpush进入account队列
                不正常
                    标记账号不可用




crawl_person_infos #获取用户信息
    execute_user_task #执行获取用户任务
    获取种子用户uid
        crawl_person_infos
            get_profile(uid) #判断是否已爬过，用户信息表中是否存在
                是
                    标记已爬取
                否
                    get_user_from_web(uid)
                        get_page(url,auth_level,need_proxy) #获取用户主页信息,根据auth_level判断是否需要cookies
                            是 #不登陆需cookies
                                get_cookies
                                    get_tid_and_c,使用访客url获取访客cookies
                                        get_tid_and_c
                                requests.get(url,cookies=cookies)
                                    是否抛出异常
                                    响应码是否414，表示IP被限制
                                        如need_proxy=False,os.kill 当前pid
                                    resp.content是否为空
                                        是，继续循环执行get_page
                                    是否404
                                        是，返回空，退出循环
                            否 #需登陆需cookies
                                Cookies.fet_cookies()
                                    for i in range(cookies_con.llen('account_queue')
                                        从cookies_con.lpop('account_queue')获取已登陆account name
                                        cookies_con.hget('account',name)获取cookies，判断cookies是否过期
                                            过期
                                                从account删除name,continue
                                            未过期
                                                cookies_con.rpush('account_queue',name)
                                                cookies=cookies_con.hget('account',name)
                                                return name,cookies['cookies'],cookies['proxy']
                                requests.get(url,cookies=cookies)
                                判断resp.url is_banned or is_403(resp.content)
                                    是
                                        LoginInfo.freeze_account,标记用户is_banned
                                        Cookies.delete_cookies(name)
                                        continue
                Urls.store_crawl_url(url, 1) #标记该用户url已爬取
                return resp.content
            get_detail(uid,html)
                判断is_404(html)
                    否
                        get_userdomain #判断用户类型
                        get_user_detail #解析页面，组装User



